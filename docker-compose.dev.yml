services:
  postgresql:
    container_name: database-postgresql
    image: docker.io/postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - local-network
    healthcheck:
      test: "pg_isready --username=${DB_USERNAME} && psql --username=${DB_USERNAME} --list"
      interval: 5s
      timeout: 10s
      retries: 10

  # mariadb:
  #   container_name: database-mariadb
  #   image: docker.io/mariadb:latest
  #   restart: unless-stopped
  #   environment:
  #     - MARIADB_ROOT_PASSWORD=${DB_PASSWORD}
  #     - MARIADB_PASSWORD=${DB_PASSWORD}
  #   ports:
  #     - "3306:3306"
  #   volumes:
  #     - mariadb_data:/var/lib/mysql
  #   networks:
  #     - local-network

  mysql:
    container_name: database-mysql
    image: docker.io/mysql:8.4
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${GHOST_DATABASE}
    ports:
      - "3306:3306"
    networks:
      - local-network
    volumes:
      - mysql_data:/var/lib/mysql

  redis:
    container_name: cache-redis
    image: docker.io/redis:7.4-alpine
    env_file: .env
    restart: unless-stopped
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    command: ["redis-server", "--maxmemory-policy", "noeviction"]
    ports:
      - 6379:6379
    networks:
      - local-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: cache-rabbitmq
    image: rabbitmq:3.12-management
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - local-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 3s

  minio:
    container_name: storage-minio
    image: quay.io/minio/minio
    command: server /data --console-address ":9090"
    restart: unless-stopped
    environment:
      - MINIO_ROOT_USER=${MINIO_USERNAME}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
      - MINIO_REGION=${MINIO_REGION}
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - minio_data:/data
    networks:
      - local-network

  logger:
    image: docker.io/amir20/dozzle:latest
    container_name: app-dozzle
    restart: unless-stopped
    environment:
      DOZZLE_AUTH_PROVIDER: simple
    ports:
      - "3100:8080" # for dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/data
    networks:
      - local-network

  chartdb:
    image: ghcr.io/chartdb/chartdb:latest
    container_name: app-chartdb
    restart: unless-stopped
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3101:80" # for chartdb
    networks:
      - local-network

  ghost:
    image: docker.io/ghost:5-alpine
    container_name: app-ghost
    restart: unless-stopped
    environment:
      # see https://ghost.org/docs/config/#configuration-options
      - url=http://localhost:2368
      # setup database
      - database__client=mysql
      - database__connection__host=${GHOST_HOST}
      - database__connection__port=${GHOST_PORT}
      - database__connection__user=${GHOST_USERNAME}
      - database__connection__password=${GHOST_PASSWORD}
      - database__connection__database=${GHOST_DATABASE}
      # smtp email
      - mail__transport=${MAIL_TRANSPORT}
      - mail__from=${MAIL_FROM}
      - mail__options__host=${MAIL_HOST}
      - mail__options__port=${MAIL_PORT}
      - mail__options__secureConnection=${MAIL_SECURE_CONNECTION}
      - mail__options__auth__user=${MAIL_USER}
      - mail__options__auth__pass=${MAIL_PASSWORD}
    ports:
      - "2368:2368"
    volumes:
      - ghost_data:/var/lib/ghost/content
    networks:
      - local-network
    depends_on:
      - mysql

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  mariadb_data:
    driver: local
  mysql_data:
    driver: local
  rabbitmq_data:
    driver: local
  ghost_data:
    driver: local

networks:
  local-network:
    external: true
